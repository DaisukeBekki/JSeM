-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Japanese (FraCaS-style) semantic test suit and Haskell tools
--   
--   Please see the README on Github at
--   <a>https://github.com/DaisukeBekki/JSeM#readme</a>
@package jsem
@version 0.1.3


module JSeM

-- | A data type for each JSeM entry.
data JSeMData
JSeMData :: Text -> JSeMLabel -> [Text] -> [Text] -> Text -> [Text] -> Text -> JSeMData
[jsem_id] :: JSeMData -> Text
[answer] :: JSeMData -> JSeMLabel
[phenomena] :: JSeMData -> [Text]
[inference_type] :: JSeMData -> [Text]
[note] :: JSeMData -> Text
[premises] :: JSeMData -> [Text]
[hypothesis] :: JSeMData -> Text

-- | Three labels as answers to a given inference data (yes, no, unknown)
--   plus four extra labels (undef, unacceptable, weaklyaceptable,
--   infelicitous) for syntactic, semantic and pragmatic anomaly.
data JSeMLabel
YES :: JSeMLabel
NO :: JSeMLabel
UNKNOWN :: JSeMLabel
UNDEF :: JSeMLabel

-- | Convert a list of JSeMData into Data.TEXT (in TSV format)
jsemData2Tsv :: [JSeMData] -> Text
instance GHC.Show.Show JSeM.JSeMData
instance GHC.Classes.Eq JSeM.JSeMData
instance GHC.Show.Show JSeM.JSeMLabel
instance GHC.Classes.Eq JSeM.JSeMLabel


module JSeM.Cmd
getFilesFromFolder :: String -> IO [FilePath]
readFileUtf8 :: FilePath -> IO Text

-- | 任意の文字コードのテキストを受け取り、utf8形式に変換する
nkf :: Text -> IO Text

-- | XMLテキストを整形
tidy :: Text -> IO Text

-- | XMLテキストを検証
xmllint :: String -> IO ()


module JSeM.TSV

-- | tsv形式のJSeMデータをTextとして受け取り、 | XML形式のJSeMデータを出力する。 |
--   （ここではnkfやtidyを使わない。必要な場合はshellから呼ぶこと）
tsv2XML :: Text -> IO Text

-- | tsv形式のJSeMデータのファイル名を受け取り、XML形式のJSeMデータを出力する。
tsvFile2XML :: FilePath -> IO Text

-- | 与えたtsvファイルのすべてについて、データ形式をチェック（現在はコラム数が9以上であることを確認のみ）
validateTsvFiles :: [FilePath] -> IO ()


module JSeM.XML

-- | takes a file path of a JSeM file (XML format) and returns a list of
--   <a>JSeMData</a>.
xmlFile2JSeMData :: FilePath -> IO [JSeMData]
xmlFile2problems :: FilePath -> IO [Cursor]
problems2stat :: [Cursor] -> Text
